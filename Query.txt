#1. Create new database:
create database ecommerce;


#2. Create 8 new tables:
create table customers_dataset (
        customer_id varchar not null,
        customer_unique_id varchar,
        customer_zip_code_prefix int,
        customer_city varchar,
        customer_state varchar
);


create table geolocation_dataset (
        geolocation_zip_code_prefix int,
        geolocation_lat varchar,
        geolocation_lng varchar,
        geolocation_city varchar,
        geolocation_state varchar
);


create table order_items_dataset (
        order_id varchar not null,
        order_item_id int,
        product_id varchar,
        seller_id varchar,
        shipping_limit_date timestamp without time zone,
        price real,
        freight_value real
);


create table order_payments_dataset (
        order_id varchar not null,
        payment_sequential int,
        payment_type varchar,
        payment_installments int,
        payment_value real
);


create table order_reviews_dataset (
        review_id varchar not null,
        order_id varchar,
        review_score int,
        review_comment_title varchar,
        review_comment_message text,
        review_creation_date timestamp without time zone,
        review_answer_timestamp timestamp without time zone
);


create table orders_dataset (
        order_id varchar not null,
        customer_id varchar,
        order_status varchar,
        order_purchase_timestamp timestamp without time zone,
        order_approved_at timestamp without time zone,
        order_delivered_carrier_date timestamp without time zone,
        order_delivered_customer_date timestamp without time zone,
        order_estimated_delivery_date timestamp without time zone
);


create table product_dataset (
        nums int not null,
        product_id varchar,
        product_category_name varchar,
        product_name_lenght real,
        product_description_lenght real,
        product_photos_qty real,
        product_weight_g real,
        product_length_cm real,
        product_height_cm real,
        product_width_cm real
);


create table sellers_dataset (
        seller_id varchar not null,
        seller_zip_code_prefix int,
        seller_city varchar,
        seller_state varchar
);


#3. Importing csv files into database:
copy customers_dataset(
        customer_id,
        customer_unique_id,
        customer_zip_code_prefix,
        customer_city,
        customer_state
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\customers_dataset.csv'
delimiter ','
csv header;


copy geolocation_dataset(
        geolocation_zip_code_prefix,
        geolocation_lat,
        geolocation_lng,
        geolocation_city,
        geolocation_state
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\geolocation_dataset.csv'
delimiter ','
csv header;


copy order_items_dataset(
        order_id,
        order_item_id,
        product_id,
        seller_id,
        shipping_limit_date,
        price,
        freight_value
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\order_items_dataset.csv'
delimiter ','
csv header;


copy order_payments_dataset(
        order_id,
        payment_sequential,
        payment_type,
        payment_installments,
        payment_value
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\order_payments_dataset.csv'
delimiter ','
csv header;


copy order_reviews_dataset(
        review_id,
        order_id,
        review_score,
        review_comment_title,
        review_comment_message,
        review_creation_date,
        review_answer_timestamp
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\order_reviews_dataset.csv'
delimiter ','
csv header;


copy orders_dataset(
        order_id,
        customer_id,
        order_status,
        order_purchase_timestamp,
        order_approved_at,
        order_delivered_carrier_date,
        order_delivered_customer_date,
        order_estimated_delivery_date
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\orders_dataset.csv'
delimiter ','
csv header;


copy product_dataset(
        nums,
        product_id,
        product_category_name,
        product_name_lenght,
        product_description_lenght,
        product_photos_qty,
        product_weight_g,
        product_length_cm,
        product_height_cm,
        product_width_cm
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\product_dataset.csv'
delimiter ','
csv header;


copy sellers_dataset(
        seller_id,
        seller_zip_code_prefix,
        seller_city,
        seller_state
)
from 'C:\Users\ASUS\OneDrive\Documents\Rakamin\Mini Project\Analyzing eCommerce Business Performance with SQL\Dataset\sellers_dataset.csv'
delimiter ','
csv header;


#4. Create ERD (Entity Relationship Diagram):
alter tableproduct_dataset add constraint pk_product primary key (product_id);
alter table sellers_dataset add constraint pk_sellers primary key (seller_id);
alter table orders_dataset add constraint pk_orders primary key (order_id);
alter table customers_dataset add constraint pk_cust primary key (customer_id);
alter table order_items_dataset add foreign key (product_id) references product_dataset;
alter table order_items_dataset add foreign key (seller_id) references sellers_dataset;
alter table order_items_dataset add foreign key (order_id) references orders_dataset;
alter table order_payments_dataset add foreign key (order_id) references orders_dataset;
alter table orders_dataset add foreign key (customer_id) references customers_dataset;
alter table order_reviews_dataset add foreign key (order_id) references orders_dataset;




#5. Annual Customer Activity Growth Analysis
#5.1 Calculate average monthly active users per year:
select 
a.year, 
round(avg(a.monthly_active_user)) as avg_monthly_active_user
from (
        select 
count (distinct c.customer_unique_id) as monthly_active_user,
                date_part('month', o.order_purchase_timestamp) as month,
                date_part('year', o.order_purchase_timestamp) as year
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 2,3
) as a
group by 1
order by 1;




#5.2 Calculate the number of new customers per year:
select 
date_part('year', first_time_order) as year, 
count(a.customer_unique_id) as new_customers 
from (
        select 
c.customer_unique_id,
                min(o.order_purchase_timestamp) as first_time_order
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1
) as a
group by 1
order by 1;




#5.3 Calculate the number of customers who placed a repeat order per year:
select 
a.year, 
count(distinct a.customer_unique_id) as loyal_customer
from (
        select 
c.customer_unique_id,
                date_part('year', o.order_purchase_timestamp) as year
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1,2
having count(order_id) > 1
) as a
group by 1
order by 1;




#5.4 Calculate average orders per year:
select 
year, 
round(avg(avg_order),3 ) as avg_order_per_customer 
from (
        select 
                date_part('year', o.order_purchase_timestamp) as year,
                c.customer_unique_id,
                count(o.order_id) as avg_order
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1, 2
) as a
group by 1
order by 1;




#5.5 Create a CTE (Common Table Expression):
with 
cte_mau as (
select 
a.year, 
round(avg(a.monthly_active_user)) as avg_monthly_active_user 
from (
        select 
count (distinct c.customer_unique_id) as monthly_active_user,
                date_part('month', o.order_purchase_timestamp) as month,
                date_part('year', o.order_purchase_timestamp) as year
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 2,3
) as a
group by 1
order by 1        
),
cte_new_customer as (
select 
date_part('year', first_time_order) as year, 
count(a.customer_unique_id) as new_customer 
from (
        select 
c.customer_unique_id,
                min(o.order_purchase_timestamp) as first_time_order
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1
) as a
group by 1
order by 1
),
cte_loyal_customer as (
select 
a.year, 
count(distinct a.customer_unique_id) as loyal_customer 
from (
        select 
c.customer_unique_id,
                date_part('year', o.order_purchase_timestamp) as year
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1,2
having count(order_id) > 1
) as a
group by 1
order by 1
),
cte_avg_order_per_customer as (
select 
year, 
round(avg(avg_order)) as avg_order_per_customer 
from (
        select 
                date_part('year', o.order_purchase_timestamp) as year,
                customer_unique_id,
count(o.order_id) as avg_order
from orders_dataset o
inner join customers_dataset c on c.customer_id = o.customer_id
group by 1,2
) as a
group by 1
order by 1
)
select 
        mau.year, 
        mau.avg_monthly_active_user, 
        newu.new_customer,
        loyal.loyal_customer, 
        avgopc.avg_order_per_customer
from cte_mau mau 
inner join cte_new_customer newu on mau.year = newu.year
inner join cte_loyal_cutomer loyal on loyal.year = mau.year
inner join cte_avg_order_per_customer avgopc on avgopc.year = mau.year;




#6. Annual Product Category Quality Analysis
#6.1 Calculate total revenue per year:
create table total_revenue_per_year as
select 
        date_part('year', o.order_purchase_timestamp) as year,
        sum(revenue_per_order) as total_revenue
from (
        select
                order_id,
                sum(price+freight_value) as revenue_per_order
        from order_items_dataset
        group by 1
) a
join orders_dataset o on a.order_id = o.order_id
where o.order_status = 'delivered'
group by 1
order by 1;


#6.2 Calculate total canceled orders per year:
create table total_canceled_order_per_year as
select 
        date_part('year', o.order_purchase_timestamp) as year,
        count(o.order_id) as total_canceled_orders
from orders_dataset o
where o.order_status = 'canceled'
group by 1
order by 1;




#6.3 Calculate highest total revenues per product category per year:
create table best_selling_product_per_year as
select 
        year, 
        best_product_category_by_revenue, 
        total_revenue 
from (
select 
        date_part('year', o.order_purchase_timestamp) as year,
        p.product_category_name as best_product_category_by_revenue,
        sum(oi.price + oi.freight_value) as total_revenue,
        rank() over(partition by 
date_part('year',  o.order_purchase_timestamp)
                order by 
sum(oi.price + oi.freight_value)desc) as revenue
from order_items_dataset oi
join orders_dataset o        on o.order_id = oi.order_id
join product_dataset p on p.product_id = oi.product_id
where o.order_status = 'delivered'
group by 1,2) as a
where revenue = 1;




#6.4 Calculate highest canceled order per product category per year:
create table most_canceled_product_category as
select 
        year, 
        product_category_name,
        number_of_canceled
from (
select 
        date_part('year', o.order_purchase_timestamp) as year,
        p.product_category_name,
        count(o.order_id) as number_of_canceled,
        rank() over(partition by 
date_part('year', o.order_purchase_timestamp)
                order by count(o.order_id) desc) as status
from order_items_dataset oi
join orders_dataset o        on o.order_id = oi.order_id
join product_dataset p on p.product_id = oi.product_id
where o.order_status = 'canceled'
group by 1,2, order_status
) as a
where status = 1;










#6.5 Create a new table which contain all the informations above:
select 
        tr.year,
        tr.total_revenue,
        bsp.best_product_category_by_revenue,
        bsp.total_revenue_by_product_category,
        tco.total_canceled_orders,
        mcp.product_category_name,
        mcp.number_of_canceled
from total_revenue_per_year tr
join total_canceled_order_per_year tco on tr.year = tco.year
join best_selling_product_per_year bsp on tr.year = bsp.year
join most_canceled_product_category mcp on mcp.year = tr.year;
#7. Analysis of Annual Payment Type Usage
#7.1 Calculate the number of usage per payment method, sorted by most frequently used:
select
        payment_type,
        count(op.order_id) as num_used
from order_payments_dataset op
inner join orders_dataset o on o.order_id = op.order_id
group by 1
order by 2 desc;




#7.2 Calculate annual payment type usage:
with payments as (
select
        date_part('year', order_purchase_timestamp) as year,
        payment_type,
        count(op.order_id) as num_used
from order_payments_dataset op
join orders_dataset o on o.order_id = op.order_id
group by 1,2
)
select 
          payment_type,
          sum(case when year = '2016' then num_used else 0 end) as year_2016,
          sum(case when year = '2017' then num_used else 0 end) as year_2017,
          sum(case when year = '2018' then num_used else 0 end) as year_2018
from payments 
group by 1
order by 2;